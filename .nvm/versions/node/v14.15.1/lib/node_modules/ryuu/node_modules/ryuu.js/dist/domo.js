/*!
 * domo.js v3.0.6
 * Optional utility library for Custom Apps
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.domo=t():e.domo=t()}(window,(function(){return function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(2);t.RequestMethods=r.RequestMethods;var n=o(3);t.DataFormats=n.DataFormats},function(e,t,o){"use strict";var r=o(0),n=o(4),a=function(){function e(){}return e.post=function(e,t,o){return s(r.RequestMethods.POST,e,o,!0,t)},e.put=function(e,t,o){return s(r.RequestMethods.PUT,e,o,!0,t)},e.get=function(e,t){return s(r.RequestMethods.GET,e,t)},e.delete=function(e,t){return s(r.RequestMethods.DELETE,e,t)},e.getAll=function(t,o){return Promise.all(t.map((function(t){return e.get(t,o)})))},e.onDataUpdate=function(e){window.addEventListener("message",(function(t){if(u(t.origin)&&"string"==typeof t.data&&t.data.length>0)try{var o=JSON.parse(t.data);if(!o.hasOwnProperty("alias"))return;var r=o.alias,n=JSON.stringify({event:"ack",alias:r});t.source instanceof Window&&t.source.postMessage(n,t.origin),e(r)}catch(e){console.warn("There was an error in onDataUpdate! It may be that our event listener caught a message from another source and tried to parse it, so your update still may have worked. If you would like more info, here is the error: \n",e)}}))},e.navigate=function(e,t){var o=JSON.stringify({event:"navigate",url:e,isNewWindow:t});window.parent.postMessage(o,"*")},e.filterContainer=function(e,t,o,r){var n=window.navigator.userAgent.toLowerCase(),a=/safari/.test(n),s=/iphone|ipod|ipad/.test(n),i=JSON.stringify({event:"filter",filter:{columnName:e,operator:t,values:o,dataType:r}});s&&!a?window.webkit.messageHandlers.domofilter.postMessage({column:e,operand:t,values:o,dataType:r}):window.parent.postMessage(i,"*")},e.env=c(),e.__util={isVerifiedOrigin:u,getQueryParams:c,setFormatHeaders:f,isSuccess:i},e}();function s(e,t,o,n,a){return o=o||{},new Promise((function(s,u){var c=new XMLHttpRequest;if(n?c.open(e,t,n):c.open(e,t),f(c,t,o),function(e,t){t.contentType?"multipart"!==t.contentType&&e.setRequestHeader("Content-Type",t.contentType):e.setRequestHeader("Content-Type",r.DataFormats.JSON)}(c,o),function(e,t){void 0!==t.responseType&&(e.responseType=t.responseType)}(c,o),c.onload=function(){var e;if(i(c.status)){!["csv","excel"].includes(o.format)&&c.response||s(c.response),"blob"===o.responseType&&s(new Blob([c.response],{type:c.getResponseHeader("content-type")}));var t=c.response;try{e=JSON.parse(t)}catch(e){return void u(Error("Invalid JSON response"))}s(e)}else u(Error(c.statusText))},c.onerror=function(){u(Error("Network Error"))},a)if(o.contentType&&o.contentType!==r.DataFormats.JSON)c.send(a);else{var p=JSON.stringify(a);c.send(p)}else c.send()}))}function i(e){return e>=200&&e<300}function u(e){var t=e.match("^https?://([^/]+[.])?(domo|domotech|domorig).(com|io)?(/.*)?$"),o=e.match("(.*).(domoapps).(.*)");return!!t&&!o}function c(){var e=location.search.substr(1),t={};return e.split("&").forEach((function(e){var o=e.split("=");t[o[0]]=decodeURIComponent(o[1])})),t}function f(e,t,o){if(-1!==t.indexOf("data/v1")){var a=void 0!==o.format?n.domoFormatToRequestFormat(o.format):r.DataFormats.DEFAULT;e.setRequestHeader("Accept",a)}}e.exports=a},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.get="GET",e.GET="GET",e.post="POST",e.POST="POST",e.put="PUT",e.PUT="PUT",e.delete="DELETE",e.DELETE="DELETE"}(t.RequestMethods||(t.RequestMethods={}))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.DEFAULT="application/array-of-objects",e.ARRAY_OF_OBJECTS="application/array-of-objects",e.JSON="application/json",e.CSV="text/csv",e.EXCEL="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",e.PLAIN="text/plain"}(t.DataFormats||(t.DataFormats={}))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(0);t.domoFormatToRequestFormat=function(e){switch(e){case"array-of-objects":return r.DataFormats.ARRAY_OF_OBJECTS;case"array-of-arrays":return r.DataFormats.JSON;case"excel":return r.DataFormats.EXCEL;case"csv":return r.DataFormats.CSV;default:return r.DataFormats.DEFAULT}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,