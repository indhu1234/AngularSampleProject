import { RequestOptions, ObjectRequestOptions, ArrayRequestOptions, QueryParams, FilterOperators, RequestBody, ResponseBody, ObjectResponseBody, ArrayResponseBody } from './models';
export = domo;
declare class domo {
    static post(url: string, body?: RequestBody, options?: RequestOptions): Promise<ResponseBody>;
    static post<T>(url: string, body?: RequestBody, options?: RequestOptions): Promise<T>;
    static put(url: string, body?: RequestBody, options?: RequestOptions): Promise<ResponseBody>;
    static put<T>(url: string, body?: RequestBody, options?: RequestOptions): Promise<T>;
    static get(url: string, options: ObjectRequestOptions): Promise<ObjectResponseBody[]>;
    static get(url: string, options: ArrayRequestOptions): Promise<ArrayResponseBody>;
    static get(url: string, options?: RequestOptions): Promise<ResponseBody>;
    static get<T>(url: string, options?: RequestOptions): Promise<T>;
    static delete(url: string, options?: RequestOptions): Promise<ResponseBody>;
    static delete<T>(url: string, options?: RequestOptions): Promise<T>;
    static getAll(urls: string[], options: ObjectRequestOptions): Promise<ObjectResponseBody[][]>;
    static getAll(urls: string[], options: ArrayRequestOptions): Promise<ArrayResponseBody[]>;
    static getAll(urls: string[], options?: RequestOptions): Promise<ResponseBody[]>;
    static getAll<T>(urls: string[], options?: RequestOptions): Promise<T[]>;
    /**
     * Let the domoapp optionally handle its own data updates.
     */
    static onDataUpdate(cb: (alias: string) => void): void;
    /**
     * Request a navigation change
     */
    static navigate(url: string, isNewWindow: boolean): void;
    static filterContainer(column: string, operator: FilterOperators, values: string[], dataType: 'STRING'): void;
    static filterContainer(column: string, operator: FilterOperators, values: number[], dataType: 'NUMERIC'): void;
    static filterContainer(column: string, operator: FilterOperators, values: Date[], dataType: 'DATE' | 'DATETIME'): void;
    static env: QueryParams;
    static __util: {
        isVerifiedOrigin: typeof isVerifiedOrigin;
        getQueryParams: typeof getQueryParams;
        setFormatHeaders: typeof setFormatHeaders;
        isSuccess: typeof isSuccess;
    };
}
declare function isSuccess(status: number): boolean;
declare function isVerifiedOrigin(origin: string): boolean;
declare function getQueryParams(): QueryParams;
declare function setFormatHeaders(req: XMLHttpRequest, url: string, options?: RequestOptions): void;
