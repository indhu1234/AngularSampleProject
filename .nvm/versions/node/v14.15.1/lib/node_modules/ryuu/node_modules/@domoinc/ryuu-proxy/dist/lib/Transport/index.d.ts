/// <reference types="request" />
/// <reference types="node" />
import * as Promise from 'core-js/features/promise';
import * as request from 'request';
import { IncomingMessage, IncomingHttpHeaders } from 'http';
import { Manifest, DomoClient, ProxyOptions, OauthToken } from '../models';
export default class Transport {
    private manifest;
    private clientPromise;
    private domainPromise;
    private appContextId;
    private oauthTokenPromise;
    constructor({manifest}: ProxyOptions);
    request: (options: request.Options) => any;
    getEnv(instance: string): string;
    isDomoRequest(url: string): boolean;
    isMultiPartRequest(headers: IncomingHttpHeaders): boolean;
    getManifest(): Manifest;
    getDomainPromise(): Promise;
    getLastLogin(): Promise<DomoClient>;
    getScopedOauthTokens(): Promise<OauthToken | undefined>;
    getDomoDomain(): Promise<string>;
    createContext(): Promise;
    build(req: IncomingMessage): Promise<request.Options>;
    buildBasic(req: IncomingMessage): Promise<request.Options>;
    private prepareHeaders(headers, context);
    private prepareCookies(headers, tokens);
    private parseBody(req);
    private verifyLogin(login);
}
