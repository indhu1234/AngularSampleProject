export declare enum SortableCardColumns {
    CARD_TITLE = "title",
    OWNER = "ownerId",
    CREATED = "created",
    VERSION = "version"
}
export declare enum Permission {
    ADMINISTRATION = "ADMINISTRATION",
    DELETE = "DELETE",
    READ = "READ",
    WRITE = "WRITE"
}
export declare type SortDirection = 'asc' | 'desc';
export declare type DesignRequestOptions = 'versions' | 'owners' | 'apps' | 'cards' | 'none';
export declare type AssetSection = 'appstore' | 'domoapps';
export interface RouteParams {
    designId?: string;
    cardId?: string;
    page?: string;
    containerId?: string;
    contentKey?: string;
    section?: AssetSection;
}
export interface DomoCard {
    active: boolean;
    allowTableDrill: boolean;
    badgeUpdated: number;
    created: number;
    creatorId: number;
    id: number;
    locked: boolean;
    ownerId: number;
    title: string;
    type: string;
    urn: string;
}
export interface DomoPage {
    pageId: number;
    parentPageId?: number;
    parentPageTitle?: string;
    title: string;
}
export interface DomoCardMetadata extends DomoCard {
    datasources: [];
    domoapp: {
        id: string;
        context?: DomoappContext;
    };
    owner?: {
        displayName: string;
    };
    pages: DomoPage[];
}
export interface DomoUser {
    displayName: string;
    id: number;
    invitorUserId: number;
    role: string;
    roleId: number;
    detail?: {
        email: string;
        pending: boolean;
        active: boolean;
        created: number;
        modified: number;
        title?: string;
        location?: string;
        locale?: string;
        department?: string;
        hireDate?: Date;
    };
}
export interface DesignOwner {
    avatarKey: string | null;
    detail: string | null;
    displayName: string;
    id: number;
    role: string;
    type: string;
    roleId: number;
}
export interface DesignVersion {
    accountMapping: [];
    collections: {
        name: string;
        schema: null;
        syncEnabled: boolean;
    }[];
    createdDate: Date;
    creator: string;
    designId: string;
    draft: boolean;
    fullpage: boolean;
    id: string;
    lastModifiedDate: Date;
    lastModifier: string;
    lastModifierDisplayName?: string;
    mapping: DataPoint[];
    releaseDate: null;
    scopes: [];
    size: {
        width: number;
        height: number;
    };
    version: string;
}
export interface DesignAggregate {
    latestVersion: string;
    apps: [];
    design: {
        id: string;
        createdDate: Date;
        creator: string;
        deleted: boolean;
        description: string | null;
        lastModifiedDate: Date;
        latModifier: string;
        name: string;
        oAuthEnabled: boolean;
    };
    creator: {
        id: number;
        displayName: string;
        detail: string | null;
        avatarKey: string | null;
        role: string;
        roleId: number;
    };
    referencingCards: DomoCard[];
    owners: DesignOwner[];
    thumbURL?: string;
    hasThumbnail?: boolean;
    versions: DesignVersion[];
}
export interface DomoappContext {
    id: string;
    designId: string;
    designVersion: string | null;
    mapping: null;
    collections: {
        name: string;
        schema: {
            columns: {
                type: string;
                name: string;
                visible: boolean;
            }[];
        };
        syncEnabled: boolean;
    }[];
    accountMapping: null;
    isDisabled: boolean;
}
export interface HelpMenuObject {
    title: string;
    whatsnext: {
        title: string;
        description: string;
        route: string;
    }[];
    tags: string[];
}
export interface DataPoint {
    dataSetId: string;
    alias: string;
    fields: Fields[];
    dql?: boolean;
}
interface Fields {
    alias: string;
    columnName: string;
}
export {};
