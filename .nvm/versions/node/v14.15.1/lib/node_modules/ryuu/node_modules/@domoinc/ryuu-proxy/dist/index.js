"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var Busboy = require("busboy");
var os = require("os");
var fs_1 = require("fs");
var Transport_1 = require("./lib/Transport");
var Proxy = /** @class */ (function () {
    function Proxy(config) {
        var _this = this;
        this.onError = function (err, res) {
            var status = (typeof err.statusCode !== 'undefined') ? err.statusCode : 500;
            var msg = (err.body !== undefined) ? err.body : err;
            res.status(status).send(msg);
        };
        this.express = function () { return function (req, res, next) {
            if (_this.transport.isDomoRequest(req.url)) {
                if (_this.transport.isMultiPartRequest(req.headers)) {
                    var busboy = new Busboy({ headers: req.headers });
                    var filePath_1;
                    var fieldName_1;
                    busboy.on('file', function (fieldname, file, filename) {
                        filePath_1 = path.join(os.tmpdir(), path.basename(filename));
                        fieldName_1 = fieldname;
                        file.pipe(fs_1.createWriteStream(filePath_1));
                    });
                    busboy.on('finish', function () {
                        _this.transport
                            .buildBasic(req)
                            .then(function (options) {
                            return _this.transport.request(__assign({}, options, { formData: (_a = {},
                                    _a[fieldName_1] = fs_1.createReadStream(filePath_1),
                                    _a) }));
                            var _a;
                        })
                            .then(function (rawRequest) { return rawRequest.pipe(res); })
                            .catch(function (err) { return _this.onError(err, res); });
                    });
                    return req.pipe(busboy);
                }
                return _this.transport
                    .build(req)
                    .then(function (options) { return _this.transport.request(options); })
                    .then(function (rawRequest) { return rawRequest.pipe(res); })
                    .catch(function (err) { return _this.onError(err, res); });
            }
            return next();
        }; };
        this.stream = function (req) {
            if (_this.transport.isDomoRequest(req.url)) {
                return _this.transport
                    .build(req)
                    .then(_this.transport.request);
            }
        };
        this.transport = new Transport_1.default(config);
    }
    return Proxy;
}());
exports.Proxy = Proxy;
//# sourceMappingURL=index.js.map