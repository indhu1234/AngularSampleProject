"use strict";
/*
* domoapps-client
* Node client for interacting with the domoapps services
*/
var Promise = require("bluebird");
var request = require("request-promise");
var requestRaw = require("request");
var fs = require("fs-extra");
var glob = require("glob");
var FormData = require("form-data");
var open = require("open");
var POLL_INTERVAL = 1000;
var POLL_TIMEOUT = 30000;
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
var Domo = /** @class */ (function () {
    function Domo(instanceParam, refreshTokenParam, clientIdParam, devTokenParam) {
        this.removeOwners = function (designId, owners) {
            var options = {
                url: this.server + '/domoapps/designs/' + designId + '/permissions/ADMINISTRATION?users=' + owners,
                method: 'DELETE',
                json: true,
                resolveWithFullResponse: true
            };
            return this.processRequest(options);
        };
        this.instance = instanceParam;
        this.server = 'https://' + instanceParam;
        this.refreshToken = refreshTokenParam;
        this.clientId = clientIdParam;
        this.devToken = !!devTokenParam;
    }
    Domo.prototype.getInstance = function () {
        return this.instance;
    };
    Domo.prototype.getRefreshToken = function () {
        return this.refreshToken;
    };
    Domo.prototype.getDevToken = function () {
        return this.devToken;
    };
    Domo.prototype.deleteDevToken = function () {
        this.devToken = null;
    };
    Domo.prototype.createDesign = function (manifest) {
        var options = {
            url: this.server + '/domoapps/designs?path=manifest.json',
            method: 'POST',
            json: manifest,
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    Domo.prototype.getDesign = function (id) {
        var options = {
            url: this.server + '/domoapps/designs/' + id,
            method: 'GET',
            json: true,
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    Domo.prototype.getDesigns = function () {
        var options = {
            url: this.server + '/domoapps/designs/',
            method: 'GET',
            json: true,
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    Domo.prototype.getSimpleDesigns = function () {
        var options = {
            url: this.server + '/domoapps/designs/simple',
            method: 'GET',
            json: true,
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    Domo.prototype.download = function (designId, versionParam) {
        var version = versionParam || 'latest';
        var options = {
            url: this.server + '/domoapps/designs/' + designId + '/versions/' + version + '/assets',
            method: 'GET',
            headers: null,
            resolveWithFullResponse: true
        };
        return getAuthHeader(this.clientId, this.refreshToken, this.server, this.devToken)
            .then(function (headers) {
            options.headers = headers;
            return requestRaw(options);
        });
    };
    Domo.prototype.deleteDesign = function (id, force) {
        var options = {
            url: this.server + '/domoapps/designs/' + id + '?force=' + force,
            method: 'DELETE',
            json: true,
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    Domo.prototype.unDeleteDesign = function (id) {
        var options = {
            url: this.server + '/domoapps/designs/' + id + '/undelete',
            method: 'PUT',
            json: true,
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    Domo.prototype.addOwners = function (designId, owners) {
        var options = {
            url: this.server + '/domoapps/designs/' + designId + '/permissions/ADMINISTRATION',
            method: 'POST',
            json: [owners],
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    Domo.prototype.getOwners = function (designId) {
        var options = {
            url: this.server + '/domoapps/designs/' + designId + '/permissions/ADMINISTRATION',
            method: 'GET',
            json: true,
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    Domo.prototype.uploadAsset = function (designId, version, file, contents) {
        if (file.indexOf(' ') !== -1) {
            return new Promise(function (resolve, reject) {
                reject('Spaces in file names not allowed. Please rename ' + file);
            });
        }
        var form = new FormData();
        //@ts-ignore
        form.submit = (Promise.promisify(form.submit));
        contents = contents || fs.createReadStream(file);
        form.append('file', contents);
        var options = {
            host: this.instance,
            path: '/domoapps/designs/' + designId + '/versions/' + version + '/assets?path=' + file,
            protocol: 'https:',
            headers: null,
            resolveWithFullResponse: true
        };
        return getAuthHeader(this.clientId, this.refreshToken, this.server, this.devToken)
            .then(function (headers) {
            options.headers = headers;
            //@ts-ignore
            return form.submit(options);
            //return new Promise((resolve) => {resolve(form.submit((options as unknown as FormData.SubmitOptions)))})
        })
            //@ts-ignore
            .then(function (res) {
            var promise = new Promise(function (resolve, reject) {
                var body = '';
                res.on('data', function (chunk) {
                    body += chunk;
                });
                res.on('end', function () {
                    var resp = {};
                    resp = res;
                    resp.body = JSON.parse(body);
                    verifyResponse(resp).then(function (result) {
                        resolve(result);
                    })
                        .catch(function (result) {
                        reject(result);
                    });
                });
            });
            res.resume();
            return promise;
        });
    };
    // TODO: add unit test for this
    Domo.prototype.uploadAllAssets = function (manifest) {
        var _this = this;
        var ignore = ['**/*/node_modules/**/*', 'node_modules/**/*'];
        var userIgnore = manifest.ignore;
        if (userIgnore) {
            if (userIgnore instanceof Array) {
                ignore = ignore.concat(userIgnore);
            }
            else {
                return Promise.reject('The manifest.json "ignore" property must be an Array');
            }
        }
        var manifestUpload = _this.uploadAsset(manifest.id, manifest.version, 'manifest.json', JSON.stringify(manifest));
        return manifestUpload.then(function () {
            var rest = glob.sync("**/*", { ignore: ignore })
                .filter(function (file) {
                return !fs.lstatSync(file).isDirectory() && file !== 'manifest.json';
            }).map(function (file) {
                return _this.uploadAsset(manifest.id, manifest.version, file);
            });
            var combined = [manifestUpload].concat(rest);
            return Promise.all(combined);
        });
    };
    Domo.prototype.getAsset = function (designId, version, file) {
        var options = {
            url: this.server + '/domoapps/designs/' + designId + '/versions/' + version + '/assets/' + file,
            method: 'GET',
            json: true,
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    /* not currently using, may be able to remove : commented @ 10/18/19
    Domo.prototype.getCustomersUsingDesign = function(id){
      const options = {
        url: this.server + '/domoapps/designs/' + id + '/customers',
        method: 'GET',
        json: true,
      };
    
      return this.processRequest(options);
    }*/
    /**
    * authenticate to a domo instance
    */
    Domo.prototype.login = function () {
        var _self = this;
        if (this.refreshToken) {
            return this.getLoginUser()
                .catch(function () {
                //Token must have been revoked
                _self.refreshToken = null;
                return _self.getNewAuthorization();
            });
        }
        else {
            return this.getNewAuthorization();
        }
    };
    Domo.prototype.getLoginUser = function () {
        var token = this.refreshToken;
        return this.getUserInfo()
            .then(function (user) {
            var loginData = JSON.parse(user);
            loginData.refreshToken = token;
            return loginData;
        });
    };
    Domo.prototype.getNewAuthorization = function () {
        var _self = this;
        var scope = 'domoapps content domo';
        return getAuthToken(this.server, this.clientId, scope).then(function (resp) {
            var token = JSON.parse(resp.toString());
            getAuthorizationPrompt(token);
            return poll(getRefreshToken, POLL_TIMEOUT, POLL_INTERVAL, _self.clientId, token['device_code'], _self.server)
                .then(function (data) {
                _self.refreshToken = setToken(data);
                return _self.getLoginUser();
            });
        });
    };
    Domo.prototype.createApp = function (designId, domoappId) {
        var options = {
            url: this.server + '/domoapps/apps',
            method: 'POST',
            json: {
                designId: designId,
                id: null
            },
            resolveWithFullResponse: true
        };
        if (domoappId) {
            options.json.id = domoappId;
        }
        return this.processRequest(options);
    };
    Domo.prototype.createAppAndCard = function (designId, domoappId, pageId, cardTitle) {
        var options = {
            url: this.server + '/domoapps/apps?pageId=' + pageId + '&cardTitle=' + cardTitle,
            method: 'POST',
            json: {
                designId: designId,
                id: null
            },
            resolveWithFullResponse: true
        };
        if (domoappId) {
            options.json.id = domoappId;
        }
        return this.processRequest(options);
    };
    /*
    getKpi(id: string) {
      const options: OptionsWithUrl = {
        url: this.server + '/api/content/v1/cards?urns=' + id + '&parts=domoapp,metadata',
        json: true,
        resolveWithFullResponse: true
      };
      return this.processRequest(options);
    }
    updateKpi(kpi: any) {
      const options: OptionsWithUrl = {
        url: this.server + '/api/content/v1/cards/' + kpi.id,
        method: 'PUT',
        json: kpi,
        resolveWithFullResponse: true
      };
      return this.processRequest(options);
    }
    */
    /**
     * Get all published design versions
     */
    Domo.prototype.getVersions = function (designId) {
        var options = {
            url: this.server + '/domoapps/designs/' + designId + '/versions',
            method: 'GET',
            resolveWithFullResponse: true
        };
        return this.processRequest(options).then(JSON.parse);
    };
    /**
     * Release a design version.
     * This enables the version to be locked and published to the app store.
     */
    Domo.prototype.release = function (designId, version) {
        var options = {
            url: this.server + '/domoapps/designs/' + designId + '/release',
            method: 'POST',
            resolveWithFullResponse: true
        };
        if (version) {
            options.url += "?version=" + version;
        }
        return this.processRequest(options);
    };
    Domo.prototype.getUserInfo = function () {
        var options = {
            url: this.server + '/api/content/v2/users/me',
            method: 'GET',
            resolveWithFullResponse: true
        };
        return this.processRequest(options);
    };
    //DomoRequestError | object | string
    Domo.prototype.processRequest = function (options) {
        return getAuthHeader(this.clientId, this.refreshToken, this.server, this.devToken)
            .then(function (headers) {
            if (options.headers) {
                options.headers = Object.assign(options.headers, headers);
            }
            else {
                options.headers = headers;
            }
            return request(options).then(verifyResponse).catch(handleError);
        })
            .catch(function (err) {
            return Promise.reject(err);
        });
    };
    Domo.prototype.processRequestRaw = function (options) {
        return getAuthHeader(this.clientId, this.refreshToken, this.server, this.devToken)
            .then(function (headers) {
            if (options.headers) {
                options.headers = Object.assign(options.headers, headers);
            }
            else {
                options.headers = headers;
            }
            return requestRaw(options);
        })
            .catch(function (err) {
            return Promise.reject(err);
        });
    };
    //THESE ARE DOMO. not DOMO.PROTOTYPE
    /**
    * get user's home domo directory
    */
    Domo.getHomeDir = function () {
        return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'] + '/.config/configstore';
    };
    /**
    * get user's most recent login instance
    */
    Domo.getMostRecentLogin = function () {
        var logins = glob.sync(Domo.getHomeDir() + "/*.json");
        if (logins.length === 0)
            return {};
        var recent = logins.reduce(function (prev, next) {
            return fs.statSync(prev).mtime > fs.statSync(next).mtime ? prev : next;
        });
        return fs.readJsonSync(recent);
    };
    /**
    * Generarte a unique UUID
    */
    Domo.createUUID = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    return Domo;
}());
/****************************OAuth Requests****************************/
function getAuthorizationPrompt(token) {
    var url = getAuthURL(token);
    console.log('Please authorize this login in the browser window, if not opened automatically, please visit ' + url);
    open(url, { url: true });
}
function getAuthToken(server, clientId, scope) {
    var options = {
        url: server + '/api/oauth2/device_authorization',
        method: 'POST',
        form: {
            'client_id': clientId,
            'scope': scope,
        },
        resolveWithFullResponse: true
    };
    return request(options).then(verifyResponse).catch(handleError);
}
function getAuthURL(token) {
    var url = token['verification_uri'] + '?user_code=' + token['user_code'];
    return url;
}
function getRefreshToken(clientId, deviceToken, server) {
    var options = {
        url: server + '/api/oauth2/token',
        method: 'POST',
        form: {
            'client_id': clientId,
            'grant_type': 'device_code',
            'device_code': deviceToken
        },
        resolveWithFullResponse: true
    };
    return request(options)
        .then(verifyResponse)
        .catch(handleError);
}
function getAccessToken(clientId, refreshToken, server) {
    var options = {
        url: server + '/api/oauth2/token',
        method: 'POST',
        form: {
            'client_id': clientId,
            'grant_type': 'refresh_token',
            'refresh_token': refreshToken
        },
        resolveWithFullResponse: true
    };
    return request(options)
        .then(verifyResponse)
        .catch(handleError);
}
function getSID(server, accessToken) {
    var options = {
        url: server + '/api/oauth2/sid',
        method: 'GET',
        auth: {
            'bearer': accessToken
        },
        resolveWithFullResponse: true
    };
    return request(options)
        .then(verifyResponse)
        .catch(handleError);
}
function poll(fn, timeout, interval, clientId, token, server) {
    var endTime = Number(new Date()) + (timeout || 2000);
    interval = interval || 100;
    var checkCondition = function (resolve, reject) {
        var p = fn(clientId, token, server);
        console.log('Waiting for browser authentication...');
        p.then(function (resp) {
            resolve(resp);
        }, function () {
            if (Number(new Date()) < endTime) {
                setTimeout(checkCondition, interval, resolve, reject);
            }
            else {
                reject(new Error('Timed out for authorization verification'));
            }
        });
    };
    return new Promise(checkCondition);
}
function getAuthHeader(clientId, refreshToken, server, devToken) {
    if (devToken) {
        return getDevTokenHeader(refreshToken);
    }
    return getAccessToken(clientId, refreshToken, server)
        .then(function (resp) {
        var data = JSON.parse(resp.toString());
        return getSIDHeader(server, data['access_token']);
    })
        .catch(function (err) {
        return Promise.reject(err);
    });
}
function getSIDHeader(server, accessToken) {
    return getSID(server, accessToken)
        .then(function (resp) {
        var headers = { 'X-Domo-Authentication': "" };
        var data = JSON.parse(resp.toString());
        headers['X-Domo-Authentication'] = data.sid;
        return headers;
    });
}
function getDevTokenHeader(token) {
    return new Promise(function (resolve, reject) {
        resolve({ 'X-Domo-Developer-Token': token });
    });
}
function setToken(token) {
    var data = JSON.parse(token);
    if (data['refresh_token'])
        return data['refresh_token'];
}
function verifyResponse(response) {
    var body = response.body;
    //ryuu-proxy doesn't use promise-request and so this conditional is used to accept a json only body response
    if (!body) {
        body = response;
    }
    return Promise.resolve(body);
}
;
function handleError(response) {
    var handledError = {
        statusCode: 0,
        url: "",
        message: "",
        method: response.options.method,
        failureMessage: ""
    };
    if (response.response.hasOwnProperty("statusMessage")) {
        {
            handledError.statusCode = response.response.statusCode;
            handledError.message = response.response.statusMessage;
            handledError.url = response.options.url;
            handledError.failureMessage = giveFailureMessage(handledError.statusCode, handledError.url);
        }
    }
    else {
        handledError.statusCode = undefined;
        handledError.message = response.message;
        handledError.url = response.options.url;
    }
    return Promise.reject(handledError);
}
;
function giveFailureMessage(code, url) {
    var message = "";
    if (code != 0) {
        switch (code) {
            case 302: {
                message = 'The url ' + url + ' is not currently in use. There possibly might be a typo, or it was moved.';
                break;
            }
            case 403: {
                message = 'Authentication failed, please try logging in again.';
                break;
            }
            case 401: {
                message = 'Authentication failed, please try logging in again.';
                break;
            }
            case 502: {
                message = 'Couldn\'t reach domo servers, please try again later.';
                break;
            }
        }
    }
    return message;
}
module.exports = Domo;
//# sourceMappingURL=domoapps-client.js.map