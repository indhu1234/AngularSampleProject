import * as Promise from 'bluebird';
import requestRaw = require('request');
import { OptionsWithUrl } from 'request-promise';
import { manifest } from '../models';
import { LoginData } from '../models/interfaces/login-data';
import { DesignAggregate } from '../models/interfaces/domoappstypes';
export = Domo;
declare class Domo {
    private instance;
    private server;
    private refreshToken;
    private clientId;
    private devToken;
    constructor(instanceParam: string, refreshTokenParam: string, clientIdParam: string, devTokenParam?: boolean);
    getInstance(): string;
    getRefreshToken(): string;
    getDevToken(): boolean;
    deleteDevToken(): void;
    createDesign(manifest: manifest): Promise<unknown>;
    getDesign(id: string): Promise<DesignAggregate>;
    getDesigns(): Promise<unknown>;
    getSimpleDesigns(): Promise<unknown>;
    download(designId: string, versionParam: string): Promise<requestRaw.Request>;
    deleteDesign(id: string, force: boolean): Promise<unknown>;
    unDeleteDesign(id: string): Promise<unknown>;
    addOwners(designId: string, owners: string[]): Promise<unknown>;
    removeOwners: (designId: string, owners: string[]) => any;
    getOwners(designId: string): Promise<unknown>;
    uploadAsset(designId: string, version: string, file: string, contents?: string): Promise<unknown>;
    uploadAllAssets(manifest: manifest): Promise<unknown[]>;
    getAsset(designId: string, version: string, file: string): Promise<unknown>;
    /**
    * authenticate to a domo instance
    */
    login(): Promise<LoginData>;
    getLoginUser(): Promise<LoginData>;
    getNewAuthorization(): Promise<LoginData>;
    createApp(designId: string, domoappId: string): Promise<unknown>;
    createAppAndCard(designId: string, domoappId: string, pageId: string, cardTitle: string): Promise<unknown>;
    /**
     * Get all published design versions
     */
    getVersions(designId: string): Promise<string[]>;
    /**
     * Release a design version.
     * This enables the version to be locked and published to the app store.
     */
    release(designId: string, version: string): Promise<unknown>;
    getUserInfo(): Promise<unknown>;
    processRequest(options: OptionsWithUrl): Promise<unknown>;
    processRequestRaw(options: OptionsWithUrl): Promise<requestRaw.Request>;
    /**
    * get user's home domo directory
    */
    static getHomeDir(): string;
    /**
    * get user's most recent login instance
    */
    static getMostRecentLogin(): any;
    /**
    * Generarte a unique UUID
    */
    static createUUID(): string;
}
