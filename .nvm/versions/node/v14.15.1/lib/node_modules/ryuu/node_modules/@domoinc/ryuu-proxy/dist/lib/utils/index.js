"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Domo = require("ryuu-client");
var glob = require("glob");
var fs = require("fs-extra");
var Promise = require("core-js/features/promise");
var Configstore = require("configstore");
var constants_1 = require("../constants");
function getMostRecentLogin() {
    var home = Domo.getHomeDir();
    var logins = glob.sync(home + "/ryuu/*.json");
    if (logins.length === 0)
        return Promise.resolve({});
    var recent = logins.reduce(function (prev, next) {
        return fs.statSync(prev).mtime > fs.statSync(next).mtime ? prev : next;
    });
    var loginData = fs.readJsonSync(recent);
    var configstore = new Configstore("/ryuu/" + loginData.instance);
    loginData.refreshToken = configstore.get('refreshToken');
    return Promise.resolve(loginData);
}
exports.getMostRecentLogin = getMostRecentLogin;
exports.isOauthEnabled = function (manifest) {
    return (Object.keys(manifest).includes(constants_1.OAUTH_ENABLED) && manifest[constants_1.OAUTH_ENABLED]);
};
exports.getProxyId = function (manifest) {
    return (manifest.proxyId !== undefined && typeof manifest.proxyId === 'string')
        ? (manifest.proxyId)
        : (Domo.createUUID());
};
function getOauthTokens(proxyId, scopes) {
    return getMostRecentLogin()
        .then(function (loginData) {
        var configstore = new Configstore("/ryuu/" + loginData.instance);
        var allScopes = (scopes !== undefined)
            ? ([
                'domoapps'
            ].concat(scopes))
            : (['domoapps']);
        return Promise.all([
            configstore.get(proxyId + "-" + allScopes.join('-') + "-accessToken"),
            configstore.get(proxyId + "-" + allScopes.join('-') + "-refreshToken"),
        ]);
    })
        .then(function (tokens) { return ({ access: tokens[0], refresh: tokens[1] }); });
}
exports.getOauthTokens = getOauthTokens;
//# sourceMappingURL=index.js.map