"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Login = void 0;
var glob = require("glob");
var fs = require("fs-extra");
var path = require("path");
var models_1 = require("../models");
var Domo = require("ryuu-client");
var log_1 = require("./log");
var Configstore = require("configstore");
var home = Domo.getHomeDir();
var Login = /** @class */ (function () {
    function Login() {
    }
    Login.getMostRecentLogin = function (mayNotBeAuthenticated) {
        var logins = glob.sync(home + '/ryuu/*.json');
        //If there are no logins, return a rejection as the user is unauthenticated.
        if (logins.length === 0) {
            //@ts-ignore
            return Promise.resolve({});
        }
        var recent = logins.reduce(function (prev, next) {
            return fs.statSync(prev).mtime > fs.statSync(next).mtime ? prev : next;
        });
        var loginData = fs.readJsonSync(recent);
        var configstore = new Configstore('/ryuu/' + loginData.instance);
        var refreshToken = configstore.get('refreshToken');
        loginData.refreshToken = refreshToken;
        if (!mayNotBeAuthenticated) {
            verifyLoginLocal(loginData);
        }
        return Promise.resolve(new Domo(loginData.instance, loginData.refreshToken, models_1.constant.CLIENT_ID, loginData.devToken));
    };
    Login.getPreviousLogins = function () {
        var logins = (glob.sync(home + '/ryuu/*.json') || [])
            .map(function (file) {
            return fs.readJsonSync(file);
        });
        return logins;
    };
    /**
     * persist login to user's domo home
     */
    Login.persistLogin = function (instance, refreshToken, devToken) {
        var configstore = new Configstore('/ryuu/' + instance);
        configstore.set('instance', instance);
        configstore.set('refreshToken', refreshToken);
        configstore.set('devToken', !!devToken);
        return { instance: instance, refreshToken: refreshToken, devToken: devToken };
    };
    Login.removeLogin = function (instance) {
        var loginFile = path.resolve(home + '/ryuu/' + instance + '.json');
        fs.ensureFileSync(loginFile);
        return fs.unlink(loginFile);
    };
    Login.removeAllLogins = function () {
        fs.emptyDirSync(home + '/ryuu/');
    };
    Login.verifyLogin = function (login) {
        verifyLoginLocal(login);
    };
    Login.logout = function (login) {
        var instance = login.getInstance();
        deleteRefreshToken(instance);
        var configstore = new Configstore('/ryuu/' + instance);
        if (!configstore.get('refreshToken')) {
            log_1.log.ok('Successful logout from ' + instance);
            return Promise.resolve(true);
        }
        log_1.log.fail("Failed logout from " + instance);
        return Promise.resolve(false);
    };
    Login.getLogin = function (instance) {
        var configstore = new Configstore('/ryuu/' + instance);
        try {
            return Promise.resolve(new Domo(instance, configstore.get('refreshToken'), models_1.constant.CLIENT_ID, configstore.get('devToken')));
        }
        catch (ex) {
            return Promise.resolve(new Domo(instance, configstore.get('refreshToken'), models_1.constant.CLIENT_ID));
        }
    };
    return Login;
}());
exports.Login = Login;
;
function verifyLoginLocal(login) {
    if (!login.refreshToken)
        log_1.log.fail('Not authenticated', 'Please login using "domo login"');
}
;
function deleteRefreshToken(instance) {
    var configstore = new Configstore('/ryuu/' + instance);
    configstore.delete('refreshToken');
}
//# sourceMappingURL=login.js.map