"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Oauth = void 0;
var fs = require("fs-extra");
var Domo = require("ryuu-client");
var manifest_1 = require("./manifest");
var Promise = require("bluebird");
var request = require("request");
var open = require("open");
var chalk = require("chalk");
var Configstore = require("configstore");
var home = Domo.getHomeDir();
var Oauth = /** @class */ (function () {
    function Oauth() {
    }
    Oauth.isOAuthEnabled = function (manifestName) {
        if (manifest_1.Manifest.hasManifest(manifestName)) {
            var manifest = manifest_1.Manifest.get(manifestName);
            return !!manifest.oAuthEnabled;
        }
        return false;
    };
    Oauth.hasAppProxyId = function (manifestName) {
        var manifest = manifest_1.Manifest.get(manifestName);
        return !!Object.keys(manifest).includes('cardId')
            || !!(Object.keys(manifest).includes('proxyId'))
            || !!(Object.keys(manifest).includes('appContextId'));
    };
    /**
     * Requires there to be an appProxyId
     */
    Oauth.getAppProxyId = function (manifestName) {
        var manifest = manifest_1.Manifest.get(manifestName);
        if (!!Object.keys(manifest).includes('cardId')) {
            return manifest.cardId;
        }
        if (!!Object.keys(manifest).includes('appContextId')) {
            return manifest.appContextId;
        }
        return manifest.proxyId;
    };
    Oauth.getScopes = function (manifestName) {
        var manifest = manifest_1.Manifest.get(manifestName);
        if (!!Object.keys(manifest).includes('scopes')) {
            return __spreadArrays([
                'domoapps'
            ], manifest.scopes);
        }
        return ['domoapps'];
    };
    Oauth.hasTokens = function (registration) {
        var scopes = this.getScopes(registration.manifestName);
        var configstore = new Configstore('/ryuu/' + registration.instance);
        if (configstore.get(registration.proxyId + "-" + scopes.join('-') + "-refreshToken"))
            return true;
        return false;
    };
    Oauth.register = function (registration) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            request.post({
                url: "https://" + registration.instance + "/api/oauth2/device_authorization",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                form: {
                    client_id: "domo:ryuu:" + registration.proxyId,
                    scope: _this.getScopes(registration.manifestName).join(' '),
                }
            }, function (error, httpResponse, body) {
                if (httpResponse.statusCode !== 200)
                    reject(body.trim());
                resolve(JSON.parse(body));
            });
        });
    };
    Oauth.verifyRegistration = function (registration) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            open(registration.verification_uri + "?user_code=" + registration.user_code);
            // scopes are space separated
            var scopes = _this.getScopes(registration.manifestName).join(' ');
            var checkRegistration = setInterval(function () {
                new Promise(function (resolve, reject) {
                    request.get({
                        url: "https://" + registration.instance + "/domoapps/admin/device-registration/" + registration.proxyId + "?scope=" + scopes + "&device_code=" + registration.device_code
                    }, function (error, httpResponse, body) {
                        if (httpResponse.statusCode !== 200)
                            reject(body.trim());
                        resolve(JSON.parse(body));
                    });
                })
                    .then(function (result) {
                    clearInterval(checkRegistration);
                    resolve(result);
                })
                    .catch(function (error) {
                    console.log(chalk.grey('Waiting for browser oauth registration'));
                });
            }, 1000);
            setTimeout(function () {
                clearInterval(checkRegistration);
                reject('Timed out for oauth registration verification.');
            }, 20000);
        });
    };
    Oauth.getLoginData = function (loginFile) {
        return (fs.existsSync(loginFile))
            ? (fs.readJsonSync(loginFile))
            : ({});
    };
    Oauth.persistTokens = function (registration) {
        var configstore = new Configstore('/ryuu/' + registration.instance);
        var scopes = this.getScopes(registration.manifestName);
        configstore.set(registration.proxyId + "-" + scopes.join('-') + "-accessToken", registration.accessToken);
        configstore.set(registration.proxyId + "-" + scopes.join('-') + "-refreshToken", registration.refreshToken);
        return { accessToken: registration.accessToken, refreshToken: registration.refreshToken };
    };
    Oauth.deleteTokens = function (registration) {
        var configstore = new Configstore('/ryuu/' + registration.instance);
        var scopes = this.getScopes(registration.manifestName);
        return Promise.all([
            configstore.delete(registration.proxyId + "-" + scopes.join('-') + "-accessToken"),
            configstore.delete(registration.proxyId + "-" + scopes.join('-') + "-refreshToken"),
        ]);
    };
    Oauth.getTokens = function (registration) {
        var configstore = new Configstore('/ryuu/' + registration.instance);
        var scopes = this.getScopes(registration.manifestName);
        return Promise.all([
            configstore.get(registration.proxyId + "-" + scopes.join('-') + "-accessToken"),
            configstore.get(registration.proxyId + "-" + scopes.join('-') + "-refreshToken")
            //@ts-ignore
        ]).then(function (_a) {
            var accessToken = _a[0], refreshToken = _a[1];
            accessToken, refreshToken;
        });
    };
    return Oauth;
}());
exports.Oauth = Oauth;
//# sourceMappingURL=oauth.js.map