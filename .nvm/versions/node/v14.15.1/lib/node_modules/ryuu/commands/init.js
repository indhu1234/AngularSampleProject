"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inquirer = require("inquirer");
var _ = require("lodash");
var isValidJSName_1 = require("../util/isValidJSName");
var slug = require("slug");
var chalk = require("chalk");
var shelljs_1 = require("shelljs");
var async_1 = require("async");
var fs = require("fs-extra");
var path = require("path");
var log_1 = require("../util/log");
var multichoice_1 = require("../util/multichoice");
module.exports = function (program) {
    program
        .command('init')
        .option('--design_name <value>', 'Name of the design')
        .option('--starter <value>', 'Name of the starter kit')
        .option('--dataset <value>', 'Connect a dataset (y/n)')
        .description('initialize a new Custom App design')
        .action(function (options) {
        var prompts = [];
        if (!options.design_name) {
            prompts.push({
                type: 'input',
                message: 'design name',
                name: 'name'
            });
        }
        if (!options.starter) {
            prompts.push(multichoice_1.default({
                type: 'list',
                message: 'select a starter',
                name: 'starter',
                choices: ['hello world', 'manifest only', 'basic chart', 'map chart', 'sugarforce']
            }));
        }
        inquirer.prompt(prompts).then(function (answers) {
            if (options.design_name) {
                answers.name = options.design_name;
            }
            if (options.starter) {
                answers.starter = options.starter;
            }
            // answers.list = multichoice.answer(answers.list);
            answers.datasources = [];
            askDatasource(answers, options);
        });
    });
};
// recursively ask user to enter all their datasources
var askDatasource = function (currentAnswers, options) {
    if (!options['dataset']) {
        inquirer.prompt([{
                type: 'confirm',
                message: currentAnswers.datasources.length > 0 ? 'add another dataset?' : 'would you like to connect to any datasets?',
                name: 'askDatasource'
            }])
            .then(function (answers) {
            if (answers.askDatasource) {
                addDatasource(_.merge(currentAnswers, answers))
                    .then(function (combinedAnswers) {
                    // ask for more datasources
                    askDatasource(combinedAnswers, options);
                }).catch(function (err) { console.log("why" + err); });
            }
            else {
                // all done with datasources, continue on.
                initiate(_.merge(currentAnswers, answers));
            }
        });
    }
    else {
        var answers = {
            askDatasource: false
        };
        initiate(_.merge(currentAnswers, answers));
    }
};
var addDatasource = function (currentAnswers) {
    return inquirer.prompt([{
            type: 'input',
            message: 'dataset id',
            name: 'id'
        },
        {
            type: 'input',
            message: 'dataset alias',
            name: 'alias',
            validate: function (name) {
                if (!isValidJSName_1.default(name))
                    return 'Alias must be a valid JavaScript property';
                return true;
            }
        }
    ])
        //issue right here
        .then(function (datasource) {
        currentAnswers.datasources.push(datasource);
        //askDatasource(currentAnswers, {dataSource: true});
        return Promise.resolve(currentAnswers);
    });
};
var writeFilesIfNonexistent = function (files, dirs, allAnswers, callback) {
    async_1.reduce(files, [], function (filesThatExist, file, reduceCallback) {
        fs.open(file, 'r', function (err, fd) {
            var fileExists = !err;
            if (fileExists) {
                fs.closeSync(fd);
                filesThatExist.push(file);
            }
            reduceCallback(null, filesThatExist);
        });
    }, function (err, filesThatExist) {
        if (filesThatExist.length > 0) {
            callback(filesThatExist, null);
        }
        else {
            _.zip(files, dirs).forEach(writeTemplateFile.bind(this, allAnswers));
            callback(null, files);
        }
    });
};
var writeTemplateFile = function (allAnswers, filedir) {
    var templateFileExt = ['.js', '.css', '.html', '.json'];
    var file = filedir[0];
    var dir = filedir[1] || (__dirname + '/../templates/');
    var filePath = path.resolve(dir + file);
    var data = fs.readFileSync(filePath, 'utf8');
    if (templateFileExt.some(function (ext) { return file.endsWith(ext); })) {
        data = _.template(data)(allAnswers);
    }
    var destPath = path.parse(path.resolve(process.cwd(), file));
    if (!fs.existsSync(destPath.dir)) {
        fs.mkdirSync(destPath.dir, { recursive: true });
    }
    fs.writeFileSync(path.resolve(destPath.dir, destPath.base), data);
};
var initiate = function (allAnswers) {
    var files;
    var dirs;
    var step = 0;
    var stepNumber = function () {
        step++;
        return step + ".";
    };
    var nextStepsMessage = 'Next steps: \n';
    if (allAnswers.starter === 'manifest only') {
        files = ['manifest.json'];
        dirs = [null];
    }
    else if (allAnswers.starter === 'hello world') {
        files = ['manifest.json', 'index.html', 'app.js', 'app.css', 'domo.js'];
        dirs = [null, null, null, null, null];
        var dirname = slug(allAnswers.name, { lower: false });
        nextStepsMessage += stepNumber() + " " + chalk.cyan('cd') + " into the " + chalk.green(dirname) + " directory\n";
        shelljs_1.mkdir('-p', dirname);
        process.chdir(path.resolve(dirname));
    }
    else if (allAnswers.starter === 'basic chart') {
        files = ['manifest.json', 'index.html', 'app.js', 'app.css', 'domo.js', 'domoPhoenix.js'];
        var customChartTemplateDir_1 = path.join(__dirname, '/../templates/', 'basic chart/');
        dirs = __spreadArrays(new Array(files.length)).map(function (_) { return customChartTemplateDir_1; });
        var dirname = slug(allAnswers.name);
        nextStepsMessage += stepNumber() + " " + chalk.cyan('cd') + " into the " + chalk.green(dirname) + " directory\n";
        shelljs_1.mkdir('-p', dirname);
        process.chdir(path.resolve(dirname));
    }
    else if (allAnswers.starter === 'map chart') {
        files = ['manifest.json', 'index.html', 'app.js', 'app.css', 'domo.js', 'domoPhoenixWithMaps.js'];
        var customChartTemplateDir_2 = path.join(__dirname, '/../templates/', 'map chart/');
        dirs = __spreadArrays(new Array(files.length)).map(function (_) { return customChartTemplateDir_2; });
        var dirname = slug(allAnswers.name);
        nextStepsMessage += stepNumber() + " " + chalk.cyan('cd') + " into the " + chalk.green(dirname) + " directory\n";
        shelljs_1.mkdir('-p', dirname);
        process.chdir(path.resolve(dirname));
    }
    else if (allAnswers.starter === 'sugarforce') {
        files = files = [
            'thumbnail.png',
            'manifest.json',
            'index.html',
            path.join('styles', 'app.css'),
            path.join('components', 'autocomplete.js'),
            path.join('components', 'floatingactionbutton.js'),
            path.join('components', 'modal.js'),
            path.join('components', 'router.js'),
            path.join('components', 'table.js'),
            path.join('js', 'app.js'),
            path.join('js', 'helpers.js'),
            path.join('js', 'home.js'),
            path.join('js', 'leads.js'),
            path.join('js', 'opportunities.js'),
            path.join('js', 'reports.js'),
            path.join('js', 'domo.js'),
            path.join('js', 'domoPhoenixWithMaps.js'),
            path.join('views', 'home.html'),
            path.join('views', 'leads.html'),
            path.join('views', 'opportunities.html'),
            path.join('views', 'reports.html')
        ];
        var customChartTemplateDir_3 = path.join(__dirname, '/../templates/', 'sugarforce/');
        dirs = __spreadArrays(new Array(files.length)).map(function (_) { return customChartTemplateDir_3; });
        //may be wrong directory, test this still 4/1
        var dirname = slug(allAnswers.name);
        nextStepsMessage += stepNumber() + " " + chalk.cyan('cd') + " into the " + chalk.green(dirname) + " directory\n";
        shelljs_1.mkdir('-p', dirname);
        process.chdir(path.resolve(dirname));
    }
    // populate and write out the template files
    writeFilesIfNonexistent(files, dirs, allAnswers, function (err, res) {
        var dirname = slug(allAnswers.name);
        if (err) {
            log_1.log.fail('Cannot initialize new design. Doing so would overwrite existing files:' + err);
        }
        else {
            nextStepsMessage += stepNumber() + " Edit the files that were just generated. \n" + stepNumber() + " Run " + chalk.cyan('domo login') + " if you haven't already. \n" + stepNumber() + " Run " + chalk.cyan('domo publish') + " whenever you make changes. \n" + stepNumber() + " Add a Custom App card to any page in Domo. ";
            log_1.log.ok("New design initialized in the " + chalk.green(dirname || 'current') + " directory", nextStepsMessage);
        }
        if (allAnswers.starter === 'hello world') {
            fs.remove('node_modules');
        }
        process.exit();
    });
};
/**
   * Add an incrementing step to the instructions message
   */
//# sourceMappingURL=init.js.map